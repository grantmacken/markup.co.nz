<project
    basedir="../../"
    default="deploy-local"
    name="project-deployment"
    xmlns:xdb="http://exist-db.org/ant">

    <property file="build.properties" />
    <property environment="env"/>
    <property name="project.base" value="${basedir}"/>
    <property name="dir.build" value=".build/local"/>
    <property name="dir.deploy" value=".deploy/local"/>
    <property name="dir.www" value="www"/>
    <property name="dir.deploy.data" value="${dir.deploy}/data"/>
    <property name="dir.deploy.modules" value="${dir.deploy}/modules"/>
    <property name="dir.deploy.templates" value="${dir.deploy}/templates"/>
    <property name="dir.deploy.styles" value="${dir.deploy}/resources/styles"/>
    <property name="dir.deploy.scripts" value="${dir.deploy}/resources/scripts"/>
    <property name="dir.deploy.images" value="${dir.deploy}/resources/images"/>


    <property name="dir.nginx-cache" value="/usr/local/nginx/cache"/>

    <property name="browser" value="firefox"/>
    <!-- import eXist-db tasks -->
    <path id="classpath.core">
        <fileset dir="${dir.exist}/lib/core">
            <include name="*.jar"/>
        </fileset>
        <pathelement path="${dir.exist}/exist.jar"/>
        <pathelement path="${dir.exist}/exist-optional.jar"/>
    </path>


    <target name="deploy-bumpversion">
     <!--
    Everytime we upload increment our semversion
    We use bumpversion patch ref. .bumpversion.cfg
    which alters semversion.txt and our pac
    -->
    <exec executable="git" failonerror="false">
        <arg value="commit" />
        <arg value="-a" />
        <arg value="-m" />
        <arg value="bump" />
        <redirector outputproperty="out.git.commit"/>
    </exec>
   <echo>${out.git.commit}</echo>

    <exec executable="git" failonerror="true">
        <arg value="status" />
        <redirector outputproperty="out.git.status"/>
    </exec>
   <echo>${out.git.status}</echo>

    <exec executable="bumpversion" failonerror="true">
        <arg value="patch" />
    </exec>
    <!-- Everytime we upload semversion patch -->
    <exec executable="cat" failonerror="true">
        <arg value="sem.version" />
        <redirector outputproperty="out.project.version"/>
    </exec>
    <echo>Build number in version.txt: ${out.project.version}  </echo>
</target>



    <target name="deploy-local" depends="deploy-bumpversion">

    <property name="project.version" value="${out.project.version}" />
    <property name="xar-location" value="${dir.project}/${dir.build}/${project.abbrev}-${project.version}.xar" />
    <property name="project.url" value="http://${project.domain}" />
    <property name="project.url.browse" value="http://${project.domain}" />
    <property name="exist.db" value="xmldb:exist://${host.local}:8080/exist/xmlrpc/db" />
    <property name="repo.url" value="http://${host.local}:8080/exist/apps/public-repo/public/" />
    <property name="repo.update" value="http://${host.local}:8080/exist/apps/public-repo/modules/update.xql" />
    <property name="repo.find" value="http://${host.local}:8080/exist/apps/public-repo/modules/find.xql" />
    <property name="xar-file" value="${project.abbrev}-${project.version}.xar" />
    <property name="uri.project" value="${project.abbrev}-${project.version}.xar" />
    <echo>project.version: ${project.version}</echo>
    <echo>xar-location: ${xar-location}</echo>
    <echo>repo.url: ${repo.url}</echo>
    <echo>repo.update: ${repo.update}</echo>
    <echo>xar-file: ${xar-file}</echo>

    <echo>delete ${dir.deploy} </echo>
    <delete dir="${dir.deploy}" >
        <include name="**/*" />
    </delete>


    <mkdir dir="${dir.deploy}"/>
    <mkdir dir="${dir.deploy.data}"/>
    <mkdir dir="${dir.deploy.modules}"/>
    <mkdir dir="${dir.deploy.styles}"/>
    <mkdir dir="${dir.deploy.scripts}"/>
    <mkdir dir="${dir.deploy.images}"/>
    <mkdir dir="${dir.deploy.images}/svg"/>




<!--
    <antcall target="xar-undeploy-remove" />

   <antcall target="local-deployment-folder" />
   <antcall target="eXist-data-local" />

    <antcall target="build-xar" />
    <antcall target="xar-upload" />
    <antcall target="xar-install" />
    <antcall target="browse" />
-->
</target>

<target name="local-deployment-folder">

<echo>Copy over expath-pkg.xml and controller.xql to root</echo>
   <copy todir="${dir.deploy}" file=".deploy/controller.xql"/>
   <copy todir="${dir.deploy}" file=".deploy/expath-pkg.xml"/>

<echo>The repo: update repo just in case changes made to properties file</echo>
<echoxml file="${dir.deploy}/repo.xml" append="false" namespacepolicy="elementsOnly">
    <meta xmlns="http://exist-db.org/xquery/repo">
        <description>${project.description}</description>
        <author>${project.author}</author>
        <website>http://${project.domain}</website>
        <status>alpha</status>
        <license>GNU-LGPL</license>
        <copyright>true</copyright>
        <type>application</type>
        <target>${project.domain}</target>
        <prepare>pre-install.xql</prepare>
        <finish />
        <permissions user="${exist.username}" password="${exist.password}" group="dba" mode="rw-rw-r--" />
    </meta>
</echoxml>


<echoxml file="${dir.deploy}/archive.xconf" append="false" namespacepolicy="elementsOnly">
<collection xmlns="http://exist-db.org/collection-config/1.0">
    <triggers>
        <trigger class="org.exist.collections.triggers.XQueryTrigger">
            <parameter name="url" value="xmldb:exist://localhost:8080/db/apps/markup.co.nz/modules/mu/archive-trigger.xqm"/>
        </trigger>
    </triggers>
</collection>
</echoxml>


<echoxml file="${dir.deploy}/data.xconf" append="false" namespacepolicy="elementsOnly">
<collection xmlns="http://exist-db.org/collection-config/1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema">
    <triggers>
        <trigger class="org.exist.extensions.exquery.restxq.impl.RestXqTrigger"/>
    </triggers>
</collection>
</echoxml>


<echo file="${dir.deploy}/pre-install.xql">
xquery version "1.0";

import module namespace xdb="http://exist-db.org/xquery/xmldb";

(: The following external variables are set by the repo:deploy function :)

(: file path pointing to the exist installation directory :)
declare variable $home external;
(: path to the directory containing the unpacked .xar package :)
declare variable $dir external;
(: the target collection into which the app is deployed :)
declare variable $target external;

declare function local:mkcol-recursive($collection, $components) {
    if (exists($components)) then
        let $newColl := concat($collection, "/", $components[1])
        return (
            xdb:create-collection($collection, $components[1]),
            local:mkcol-recursive($newColl, subsequence($components, 2))
        )
    else
        ()
};

(: Helper function to recursively create a collection hierarchy. :)
declare function local:mkcol($collection, $path) {
    local:mkcol-recursive($collection, tokenize($path, "/"))
};

(: store the collection configuration:)
local:mkcol("/db/system/config", $target),
local:mkcol(concat("/system/config", $target), "data/archive"),
xdb:store-files-from-pattern(concat("/system/config", $target, "/data"), $dir, "data.xconf"),
xdb:store-files-from-pattern(concat("/system/config", $target, "/data/archive"), $dir, "archive.xconf")
</echo>

</target>






</project>
