<project
    basedir="../../"
    default="deploy-local"
    name="local-project-deployment"
    xmlns:xdb="http://exist-db.org/ant">

    <property file="build.properties" />
    <property environment="env"/>
    <property name="project.base" value="${basedir}"/>
    <property name="dir.backup" value=".backup/local"/>
    <property name="dir.build" value=".build/local"/>
    <property name="dir.deploy" value=".deploy/local"/>
    <!--<property name="dir.www" value="www"/>-->
    <!--<property name="dir.deploy.data" value="${dir.deploy}/data"/>-->
    <!--<property name="dir.deploy.modules" value="${dir.deploy}/modules"/>-->
    <!--<property name="dir.deploy.templates" value="${dir.deploy}/templates"/>-->
    <!-- <property name="dir.deploy.resources" value="${dir.deploy}/resources"/>-->
    <!---->
    <!--<property name="dir.deploy.styles" value="${dir.deploy}/resources/styles"/>-->
    <!--<property name="dir.deploy.scripts" value="${dir.deploy}/resources/scripts"/>-->
    <!--<property name="dir.deploy.images" value="${dir.deploy}/resources/images"/>-->


    <property name="browser" value="firefox"/>
    <!-- import eXist-db tasks -->
    <path id="classpath.core">
        <fileset dir="${dir.exist}/lib/core">
            <include name="*.jar"/>
        </fileset>
        <pathelement path="${dir.exist}/exist.jar"/>
        <pathelement path="${dir.exist}/exist-optional.jar"/>
    </path>

     <typedef resource="org/exist/ant/antlib.xml" uri="http://exist-db.org/ant">
        <classpath refid="classpath.core"/>
    </typedef>

<property name="repo-undeploy-remove">
xquery version "3.0";
import module namespace repo="http://exist-db.org/xquery/repo";
repo:undeploy("http://${project.domain}"),
repo:remove("http://${project.domain}")
</property>

   <target name="backup-data">
    <mkdir dir="${dir.backup}/data" />

    <delete includeEmptyDirs="true" >
        <fileset dir="${dir.backup}/data"  defaultexcludes="false">
            <include name="*/**" />
        </fileset>
    </delete>

    <mkdir dir="${dir.backup}/data" />


    <xdb:extract xmlns:xdb="http://exist-db.org/ant"
                uri="xmldb:exist://${host.local}:8080/exist/xmlrpc/db/apps/${project.domain}/data"
                destdir="${dir.backup}/data"
                type="xml"
                subcollections="true"
                createdirectories="true"
                overwrite="true"
                user="${exist.username}"
                password="${exist.password}"
                />
       </target>


    <!--
      Our images are preprocessed on save and upload to remote
      Instead of proccessing again backup from local
      and use backup for post deployment
    -->

   <target name="backup">

    <mkdir dir="${dir.backup}/resources" />
    <delete includeEmptyDirs="true" >
        <fileset dir="${dir.backup}/resources"  defaultexcludes="false">
            <include name="*/**" />
        </fileset>
    </delete>
    <mkdir dir="${dir.backup}/resources" />
    <xdb:extract xmlns:xdb="http://exist-db.org/ant"
            uri="xmldb:exist://${host.local}:8080/exist/xmlrpc/db/apps/${project.domain}/resources"
            destdir="${dir.backup}/resources"
            subcollections="true"
            createdirectories="true"
            overwrite="true"
            user="${exist.username}"
            password="${exist.password}"
            />

    <mkdir dir="${dir.backup}/modules" />
    <delete includeEmptyDirs="true" >
        <fileset dir="${dir.backup}/modules"  defaultexcludes="false">
            <include name="*/**" />
        </fileset>
    </delete>
    <mkdir dir="${dir.backup}/modules" />
    <xdb:extract xmlns:xdb="http://exist-db.org/ant"
                uri="xmldb:exist://${host.local}:8080/exist/xmlrpc/db/apps/${project.domain}/modules"
                destdir="${dir.backup}/modules"
                subcollections="true"
                createdirectories="true"
                overwrite="true"
                user="${exist.username}"
                password="${exist.password}"
                />

    <mkdir dir="${dir.backup}/templates" />
    <delete includeEmptyDirs="true" >
        <fileset dir="${dir.backup}/templates"  defaultexcludes="false">
            <include name="*/**" />
        </fileset>
    </delete>

    <mkdir dir="${dir.backup}/templates" />
    <xdb:extract xmlns:xdb="http://exist-db.org/ant"
                uri="xmldb:exist://${host.local}:8080/exist/xmlrpc/db/apps/${project.domain}/templates"
                destdir="${dir.backup}/templates"
                subcollections="true"
                createdirectories="true"
                overwrite="true"
                user="${exist.username}"
                password="${exist.password}"
                />
    </target>

    <target name="deploy-bumpversion">
     <!--
    Everytime we upload increment our semversion
    We use bumpversion patch ref. .bumpversion.cfg
    which alters semversion.txt and our pac
    -->
    <exec executable="git" failonerror="false">
        <arg value="commit" />
        <arg value="-a" />
        <arg value="-m" />
        <arg value="bump" />
        <redirector outputproperty="out.git.commit"/>
    </exec>
   <echo>${out.git.commit}</echo>

    <exec executable="git" failonerror="true">
        <arg value="status" />
        <redirector outputproperty="out.git.status"/>
    </exec>
   <echo>${out.git.status}</echo>

    <exec executable="bumpversion" failonerror="true">
        <arg value="patch" />
    </exec>


    <!-- Everytime we upload semversion patch -->


    <exec executable="cat" failonerror="true">
        <arg value="sem.version" />
        <redirector outputproperty="out.project.version"/>
    </exec>
    <echo>Build number in version.txt: ${out.project.version}  </echo>

</target>



    <target name="deploy-local" depends="deploy-bumpversion">

    <property name="project.version" value="${out.project.version}" />
    <property name="xar-location" value="${dir.project}/${dir.build}/${project.abbrev}-${project.version}.xar" />
    <property name="project.url" value="http://${project.domain}" />
    <property name="project.url.browse" value="http://${project.domain}" />
    <property name="exist.db" value="xmldb:exist://${host.local}:8080/exist/xmlrpc/db" />
    <property name="repo.url" value="http://${host.local}:8080/exist/apps/public-repo/public/" />
    <property name="repo.update" value="http://${host.local}:8080/exist/apps/public-repo/modules/update.xql" />
    <property name="repo.find" value="http://${host.local}:8080/exist/apps/public-repo/modules/find.xql" />
    <property name="xar-file" value="${project.abbrev}-${project.version}.xar" />
    <property name="uri.project" value="${project.abbrev}-${project.version}.xar" />
    <echo>project.version: ${project.version}</echo>
    <echo>xar-location: ${xar-location}</echo>
    <echo>repo.url: ${repo.url}</echo>
    <echo>repo.update: ${repo.update}</echo>
    <echo>xar-file: ${xar-file}</echo>


    <mkdir dir=".backup" />
    <mkdir dir="${dir.backup}" />

     <!-- TODO a sync routine
         on localhost in data/archive and data/pages collection
         check if xml resource on localhost has corresponding file
         if it hasn't remove the resource on localhost

        -->

        <!--<antcall target="backup-data" />-->
        <!--<antcall target="backup-resources" />-->
        <!--<antcall target="backup-modules" />-->
        <!--<antcall target="backup-templates" />-->


     <mkdir dir=".deploy" />
     <mkdir dir="${dir.deploy}" />

    <echo>delete ${dir.deploy} </echo>
    <delete includeEmptyDirs="true" >
        <fileset dir="${dir.deploy}"  defaultexcludes="false">
            <include name="*/**" />
        </fileset>
    </delete>


    <mkdir dir="${dir.deploy}" />
    <mkdir dir="${dir.deploy}/data" />
    <echo>A place to store date archived atom entries as atom markup</echo>
    <mkdir dir="${dir.deploy}/data/archive" />
    <echo>A place to store pages based on collections as atom markup</echo>
    <mkdir dir="${dir.deploy}/data/pages" />
    <echo>A place to store ... other authors as h-card markup</echo>
    <mkdir dir="${dir.deploy}/data/authors" />
    <echo>A place to store ...citations of other pages as h-cite markup</echo>
    <mkdir dir="${dir.deploy}/data/citations" />
    <echo>A place to store ... webmentions;
    where others in-reply-to my stuff have commented, liked, reposted my stuff
    on thier site, and sent me a web mention. stored as h-cite markup in a date archive</echo>
    <mkdir dir="${dir.deploy}/data/mentions" />
    <echo>A place to store ...xml job ques triggered by stuff being stored elsewhere</echo>
    <mkdir dir="${dir.deploy}/data/_jobs" />
    <mkdir dir="${dir.deploy}/data/_jobs/mentions" />
    <echo>A place to store ... mention jobs. This is a public(guest) write dir . Though can not be read by guest.</echo>

    <mkdir dir="${dir.deploy}/templates" />
    <echo>HTML TEMPLATES ...</echo>

    <echo>XQUERY MODULES ... Make sure these have execute permissions</echo>
    <mkdir dir="${dir.deploy}/modules" />

    <mkdir dir="${dir.deploy}/modules/mu" />
    <echo>mu xQuery modules ... markup modules
     the xQuery functions that are called by our HTML templates to create our
     html views. our data-map , our site navigations, page, posts tags views
    </echo>

    <mkdir dir="${dir.deploy}/modules/mu/helpers" />
    <echo>TODO mu helper xQuery modules ... markup modules
     generic helper functions, base60, mf2 etc
    </echo>



    <mkdir dir="${dir.deploy}/modules/api" />
    <echo>api modules ...
    These have '.xq' extensions to be used as api endpoints that can be accessed by
    the public (guest) account by http GET or POST requests
    They provide access the exist REST interface
     nginx rewrites /webmentions.xq  as
     /exist/rest/apps/domain/modules/api/webmention.xq.
    </echo>


    <mkdir dir="${dir.deploy}/modules/triggers" />
    <echo>trigger modules. The result of the request is some data stored as a job.
    The storing of a 'job' triggers a xquery-trigger
    which calls upon xQuery to carry out the task.

    Triggers have '.xqm' extensions and can not be accessed by the public (guest) account.
    The can only be accessed by the dba account holder
    </echo>


    <mkdir dir="${dir.deploy}/modules/_local" />
    <echo>_local modules. local modules.
    used to upload to remote when a file is stored locall
    </echo>

    <mkdir dir="${dir.deploy}/resources" />
    <mkdir dir="${dir.deploy}/resources/images" />
    <mkdir dir="${dir.deploy}/resources/styles" />
    <mkdir dir="${dir.deploy}/resources/scripts" />

    <antcall target="local-deployment-folder" />

    <echo>copy from ${dir.backup} to  ${dir.deploy}</echo>

    <echo>copy our changed working template files</echo>
    <copy todir="${dir.deploy}/templates">
        <fileset dir="${dir.backup}/templates" />
        <mapper type="glob"
                from="*.html.xml"
                to="*.html"/>

    </copy>
    <echo>copy our changed working modules</echo>
    <copy todir="${dir.deploy}/modules">
        <fileset dir="${dir.backup}/modules" />
    </copy>

    <echo>copy our changed working resources files</echo>
    <copy todir="${dir.deploy}/resources">
        <fileset dir="${dir.backup}/resources" />
                <mapper type="glob"
                from="*.svg.xml"
                to="*.svg"/>
    </copy>



    <echo>copy our changed working data files</echo>
    <copy todir="${dir.deploy}/data">
        <fileset dir="${dir.backup}/data" />
    </copy>


    <echo>create hosts.xml in data dir</echo>

    <echoxml file="${dir.deploy.data}/hosts.xml" append="false">
        <hosts>
            <local>${host.local}</local>
            <remote>${host.remote}</remote>
        </hosts>
    </echoxml>



    <echo>Remove existing deployment</echo>
    <antcall target="xar-undeploy-remove" />
    <echo>Build the deployment xar</echo>
    <antcall target="build-xar" />
    <echo>Upload the deployment xar</echo>
    <antcall target="xar-upload" />
    <echo>install the deployment</echo>
    <antcall target="xar-install" />
    <echo>browse and maybe run tests with phantomjs</echo>
    <antcall target="browse" />

</target>

<target name="local-deployment-folder">

<echo>The expath-pkg: update the expath packages file</echo>
<echoxml file="${dir.deploy}/expath-pkg.xml" append="false" namespacepolicy="elementsOnly">
    <package abbrev="${project.abbrev}" name="http://${project.domain}" spec="1.0" version="${out.project.version}" xmlns="http://expath.org/ns/pkg">
      <title>${project.domain}</title>
    </package>
</echoxml>


<echo>The repo: update repo just in case changes made to properties file</echo>
<echoxml file="${dir.deploy}/repo.xml" append="false" namespacepolicy="elementsOnly">
    <meta xmlns="http://exist-db.org/xquery/repo">
        <description>${project.description}</description>
        <author>${project.author}</author>
        <website>http://${project.domain}</website>
        <status>alpha</status>
        <license>GNU-LGPL</license>
        <copyright>true</copyright>
        <type>application</type>
        <target>${project.domain}</target>
        <prepare>pre-install.xql</prepare>
        <finish>post-install.xql</finish>
        <permissions user="${exist.username}" password="${exist.password}" group="dba" mode="rw-rw-r--" />
    </meta>
</echoxml>

<echo>
    xconf: for our data archive collection
    This calls a _local trigger
    Note: we to do not want end up in the remote
</echo>

<echoxml file="${dir.deploy}/archive.xconf" append="false" namespacepolicy="elementsOnly">
<collection xmlns="http://exist-db.org/collection-config/1.0">
    <triggers>
        <trigger class="org.exist.collections.triggers.XQueryTrigger">
            <parameter name="url" value="xmldb:exist://${host.local}:8080/db/apps/${project.domain}/modules/_local/archive-trigger.xqm"/>
        </trigger>
    </triggers>
</collection>
</echoxml>

<echo>xconf: for our data files</echo>

<echoxml file="${dir.deploy}/data.xconf" append="false" namespacepolicy="elementsOnly">
<collection xmlns="http://exist-db.org/collection-config/1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema">
    <triggers>
        <trigger class="org.exist.extensions.exquery.restxq.impl.RestXqTrigger"/>
    </triggers>
</collection>
</echoxml>


<echo>xconf: for our resource files</echo>

<echoxml file="${dir.deploy}/resources.xconf" append="false" namespacepolicy="elementsOnly">
<collection xmlns="http://exist-db.org/collection-config/1.0">
    <triggers>
        <trigger class="org.exist.collections.triggers.XQueryTrigger">
            <parameter name="url" value="xmldb:exist://127.0.0.1:8080/db/apps/${project.domain}/modules/_local/resources-trigger.xqm"/>
        </trigger>
    </triggers>
</collection>
</echoxml>



<echo>pre-install.xql: for our data files</echo>

<echo file="${dir.deploy}/pre-install.xql">
xquery version "3.0";
import module namespace xmldb="http://exist-db.org/xquery/xmldb";

declare variable $home external;
declare variable $dir external;
declare variable $target external;

declare function local:mkcol-recursive($collection, $components) {
    if (exists($components)) then
        let $newColl := concat($collection, "/", $components[1])
        return (
            xmldb:create-collection($collection, $components[1]),
            local:mkcol-recursive($newColl, subsequence($components, 2))
        )
    else
        ()
};

declare function local:mkcol($collection, $path) {
    local:mkcol-recursive($collection, tokenize($path, "/"))
};

(: store the collection configuration:)
local:mkcol("/db/system/config", $target),
local:mkcol(concat("/system/config", $target), "data/archive"),
local:mkcol(concat("/system/config", $target), "resources"),
xmldb:store-files-from-pattern(concat("/system/config", $target, "/data"), $dir, "data.xconf"),
xmldb:store-files-from-pattern(concat("/system/config", $target, "/data/archive"), $dir, "archive.xconf"),
xmldb:store-files-from-pattern(concat("/system/config", $target, "/resources"), $dir, "resources.xconf")
</echo>


<echo>prost-install.xql: for our data files</echo>

<echo file="${dir.deploy}/post-install.xql">
xquery version "3.0";

import module namespace sm="http://exist-db.org/xquery/securitymanager";
import module namespace xmldb="http://exist-db.org/xquery/xmldb";

(: The following external variables are set by the repo:deploy function :)
declare variable $home external;
declare variable $dir external;
declare variable $target external;

(: Allow guests to add documents to collection but not read:)
( sm:chmod(xs:anyURI($target || "/data/jobs"), "rwxrwx-wx"),

)

</echo>




<echo>finally our controller: for our data files</echo>

<echo file="${dir.deploy}/controller.xql" append="false" >
xquery version "3.0";

declare default element namespace "http://www.w3.org/2005/Atom";
declare variable $exist:path external;
declare variable $exist:resource external;
declare variable $exist:controller external;
declare variable $exist:prefix external;
declare variable $exist:root external;

import module namespace xmldb="http://exist-db.org/xquery/xmldb";

if (matches($exist:path ,'^/[0-9A-HJ-NP-Z_a-km-z]{3}[0-9]{1,2}\.html$')) then(
  let $strID := replace($exist:path, '^/([0-9A-HJ-NP-Z_a-km-z]{3}[0-9]{1,2})\.html$', '$1')
  let $strB60 := replace($exist:path, '^/([0-9A-HJ-NP-Z_a-km-z]{3})[0-9]{1,2}\.html$', '$1')
  let $base := 60
(:  The entry point is  $strB60 :)
  let $seqDecode :=
       map(function( $codePoint ){
        let $c := xs:integer($codePoint)
        return
                if ($c &gt;= 48 and $c &lt;= 57 ) then ($c - 48)
          else if ($c &gt;= 65 and $c &lt;= 72 ) then ($c - 55)
          else if ($c eq 73 or $c eq 108 ) then (1)
          else if ($c &gt;= 74 and $c &lt;= 78 ) then ($c - 56)
          else if ($c eq 79 ) then (0)
          else if ($c &gt;= 80 and $c &lt;= 90 ) then ($c - 57)
          else if ($c eq 95 ) then (34)
          else if ($c &gt;= 97 and $c &lt;= 107 ) then ($c - 62)
          else if ($c &gt;= 109 and $c &lt;= 122 ) then ($c - 63)
          else(0)
          },
          (map(function($ch){string-to-codepoints($ch)}, (for $ch in string-to-codepoints($strB60)
         return codepoints-to-string($ch)))
          ))
  let $tot := function($n2, $c){xs:integer(($base * $n2) + $c + 1)}
  let $n2 := 0
  let $dc1 := $tot($n2, $seqDecode[1])
  let $dc2 := $tot($dc1, $seqDecode[2])
  let $decoded := $tot($dc2, $seqDecode[3] -1  )
  let $yr := '20' || substring($decoded, 1, 2)
  let $yrStart := xs:date($yr || string('-01-01'))
  let $dysInYr := substring($decoded, 3, 6)
  let $duration := xs:dayTimeDuration("P" || string(xs:integer($dysInYr)- 1)  || "D")
  let $decodedDate := xs:date($yrStart + $duration)
  let $formatedDate := format-date($decodedDate, "[Y0001]/[M01]/[D01]", 'en', (), ())
  let $colPath :=  concat( $exist:root  , $exist:controller , '/data/archive/' , $formatedDate )
  let $redirect :=
    if( xmldb:collection-available( $colPath ) ) then (
      if( exists(xmldb:xcollection($colPath)//id[contains(., $strID)] )) then (
        xmldb:xcollection($colPath)//*[id[contains(., $strID)]]/link[@rel="alternate"]/@href/string()
        )
      else( 'http://' ||  $exist:controller || '/' || 'collection-not-available' ||  '/' || $strB60  ||  '/' || $strID ||   '/' || $formatedDate )
    )
    else( 'http://' ||  $exist:controller || '/' || 'id-not-found' ||  '/' || $strB60  ||  '/' || $strID ||   '/' || $formatedDate )
return
    &lt;dispatch xmlns="http://exist.sourceforge.net/NS/exist"&gt;
     &lt;redirect url="{$redirect}"/&gt;
    &lt;/dispatch&gt;
)
else if (ends-with($exist:resource, ".html")) then
let $template-pages := '/templates/pages/'
let $template-posts := '/templates/posts/'
let $collection := if( matches($exist:path ,'^/index.html$'))then ('home')
else(tokenize($exist:path, '/')[2])


let $colURL :=
  if( matches( $exist:path , '^/archive/index.html$')) then (
      $exist:controller ||  $template-posts ||  'archive' || '.html'
      )
  else if( contains( $exist:path , 'archive/' )) then (
     $exist:controller ||  $template-posts ||  'entry' || '.html'
    )
  else(
    $exist:controller ||  $template-pages ||  $collection || '.html'
    )

let $errorURL := $exist:controller ||  $template-pages || 'error.html'
let $viewURL := $exist:controller ||  '/modules/view.xql'
return
&lt;dispatch xmlns="http://exist.sourceforge.net/NS/exist"&gt;
  &lt;forward method="get" url="{$colURL}" /&gt;
  &lt;view&gt;
    &lt;forward url="{$viewURL}"&gt;
      &lt;add-parameter name="exist-root" value="{$exist:root}" /&gt;
      &lt;add-parameter name="exist-prefix" value="{$exist:prefix}" /&gt;
      &lt;add-parameter name="exist-controller" value="{$exist:controller}" /&gt;
      &lt;add-parameter name="exist-resource" value="{$exist:resource}" /&gt;
      &lt;add-parameter name="exist-path" value="{$exist:path}" /&gt;
    &lt;/forward&gt;
  &lt;/view&gt;
  &lt;error-handler&gt;
    &lt;forward method="get" url="{$errorURL}" /&gt;
    &lt;forward url="{$viewURL}" /&gt;
  &lt;/error-handler&gt;
&lt;/dispatch&gt;
else
&lt;dispatch xmlns="http://exist.sourceforge.net/NS/exist"&gt;
  &lt;cache-control cache="yes" /&gt;
&lt;/dispatch&gt;
</echo>


</target>


<target name="eXist-data-local">
    <echo>Proccess md again </echo>
    <antcall target="proccess-md" />

    <echo>copy our changed md proccessed files to the data dir</echo>
    <copy todir="${dir.deploy.data}">
        <fileset dir=".deploy/data" />
    </copy>

    <echo>copy our citations and visiting cards to the data dir</echo>
    <copy todir="${dir.deploy.data}">
        <fileset dir="data" />
    </copy>

    <echo>create hosts.xml in data dir</echo>

    <echoxml file="${dir.deploy.data}/hosts.xml" append="false">
        <hosts>
            <local>${host.local}</local>
            <remote>${host.remote}</remote>
        </hosts>
    </echoxml>



    <antcall target="proccess-sass" />

    <antcall target="proccess-imagesAndScripts" />
</target>

<target name="proccess-md">
    <property name="pyFile">.bin/md2.py</property>
     <echo>${pyFile}</echo>
    <apply executable="python" failonerror="false" dir="${project.base}">
        <arg value="${pyFile}" />
        <arg value="-i" />
        <srcfile />
        <fileset dir="${dir.www}">
            <exclude name="**/resources/**" />
            <include name="**/*.md" />
        </fileset>
    </apply>
</target>

<target name="proccess-sass">

    <echo>compile sass and generate a single stylesheet. ${dir.deploy.styles}/style.css. Ref. rb file at root</echo>
    <exec executable="compass" failonerror="true">
        <arg value="compile" />
        <redirector outputproperty="md" alwayslog="true" />
    </exec>
</target>



<target name="proccess-imagesAndScripts">
    <echo>TODO: optimise images then copy to ${dir.deploy}/resources/images</echo>
    <copy todir="${dir.deploy.images}" includeemptydirs="true">
        <fileset dir="www/resources/images" />
    </copy>
    <echo>TODO: lint and minify js then copy to ${dir.deploy.scripts}</echo>
    <copy todir="${dir.deploy.scripts}" includeemptydirs="true">
        <fileset dir="www/resources/scripts" />
    </copy>
</target>

<target name="build-xar">
    <zip destfile="${xar-location}" basedir="${dir.deploy}" whenempty="create" fallbacktoUTF8="true" excludes=".git*" />
</target>

<target name="xar-upload">
    <exec executable="curl">
        <arg line="-T ${xar-location} -u ${exist.username}:${exist.password} ${repo.url}/${xar-file}" />
    </exec>
    <exec executable="curl">
        <arg line="-G -u ${exist.username}:${exist.password} ${repo.update}" />
    </exec>
</target>


<target name="xar-install" >
<property name="install-and-deploy">
xquery version "3.0";
import module namespace repo="http://exist-db.org/xquery/repo";
repo:install-and-deploy("${project.url}","${project.version}" ,"${repo.find}")
</property>

<xdb:xquery  uri="${exist.db}" query="${install-and-deploy}" user="${exist.username}" password="${exist.password}" />
</target>



<target name="xar-undeploy-remove">
<xdb:xquery
    uri="${exist.db}"
    query="${repo-undeploy-remove}"
    user="${exist.username}"
    password="${exist.password}"
    outputproperty="undeploy-remove"
/>

<echo>eXist reply:  ${undeploy-remove}</echo>
    <exec executable="curl">
        <arg line="-G -u ${exist.username}:${exist.password} ${repo.update}"/>
    </exec>
</target>

<target name="browse">
    <exec executable="${browser}" spawn="true">
        <arg value="${project.url.browse}" />
    </exec>
</target>

</project>
