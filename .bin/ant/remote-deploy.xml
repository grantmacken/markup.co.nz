<project
    basedir="../../"
    default="deploy-remote"
    name="project-deployment"
    xmlns:xdb="http://exist-db.org/ant">

    <property file="build.properties" />
    <property environment="env"/>
    <property name="project.base" value="${basedir}"/>
    <property name="dir.build" value=".build/remote"/>
    <property name="dir.deploy" value=".deploy/remote"/>
    <property name="dir.www" value="www"/>
    <property name="dir.deploy.data" value="${dir.deploy}/data"/>
    <property name="dir.deploy.modules" value="${dir.deploy}/modules"/>
    <property name="dir.deploy.templates" value="${dir.deploy}/templates"/>
    <property name="dir.deploy.styles" value="${dir.deploy}/resources/styles"/>
    <property name="dir.deploy.scripts" value="${dir.deploy}/resources/scripts"/>
    <property name="dir.deploy.images" value="${dir.deploy}/resources/images"/>


    <property name="dir.nginx-cache" value="/usr/local/nginx/cache"/>

    <property name="browser" value="firefox"/>
    <!-- import eXist-db tasks -->
    <path id="classpath.core">
        <fileset dir="${dir.exist}/lib/core">
            <include name="*.jar"/>
        </fileset>
        <pathelement path="${dir.exist}/exist.jar"/>
        <pathelement path="${dir.exist}/exist-optional.jar"/>
    </path>

     <typedef resource="org/exist/ant/antlib.xml" uri="http://exist-db.org/ant">
        <classpath refid="classpath.core"/>
    </typedef>


<property name="repo-undeploy-remove">
xquery version "3.0";
import module namespace repo="http://exist-db.org/xquery/repo";
repo:undeploy("http://${project.domain}"),
repo:remove("http://${project.domain}")
</property>





<target name="browse">
    <exec executable="${browser}" spawn="true">
        <arg value="${project.url.browse}" />
    </exec>
</target>


<target name="deploy-remote" depends="condition-hostRomote, set-hostRomote" >
<echo> DEPLOY TO REMOTE HOST: ${host.remote}</echo>
    <condition property="reachable.remotelhost8080">
        <isreachable url="http://${host.remote}" />
    </condition>
    <echo>CHECK: ${reachable.remotelhost8080} -  ${host.remote} is reachable on port 8080 </echo>

    <!-- Everytime we upload semversion patch -->
    <exec executable="cat" failonerror="true">
        <arg value="sem.version" />
        <redirector outputproperty="out.project.version"/>
    </exec>
    <echo>Semantic Build number in sem.version: ${out.project.version}  </echo>

   <property name="exist.db" value="xmldb:exist://${host.remote}:8080/exist/xmlrpc/db" />
    <property name="project.version" value="${out.project.version}" />
    <property name="xar-location" value="${dir.build}/${project.abbrev}-${project.version}.xar" />
    <property name="project.url" value="http://${project.domain}" />
    <property name="project.url.browse" value="http://www.${project.domain}" />
    <property name="repo.url" value="http://${host.remote}:8080/exist/apps/public-repo/public/" />
    <property name="repo.update" value="http://${host.remote}:8080/exist/apps/public-repo/modules/update.xql" />
    <property name="repo.find" value="http://${host.remote}:8080/exist/apps/public-repo/modules/find.xql" />
    <property name="xar-file" value="${project.abbrev}-${project.version}.xar" />

    <echo>project.version: ${project.version}</echo>
    <echo>xar-location: ${xar-location}</echo>
    <echo>repo.url: ${repo.url}</echo>
    <echo>repo.update: ${repo.update}</echo>
    <echo>xar-file: ${xar-file}</echo>

    <mkdir dir="${dir.deploy}" />

    <echo>delete ${dir.deploy} </echo>
    <delete dir="${dir.deploy}" >
        <include name="**/*" />
    </delete>
    <mkdir dir="${dir.deploy}"/>
    <mkdir dir="${dir.deploy.templates}"/>
    <mkdir dir="${dir.deploy.data}"/>
    <mkdir dir="${dir.deploy.modules}"/>
    <mkdir dir="${dir.deploy.styles}"/>
    <mkdir dir="${dir.deploy.scripts}"/>
    <mkdir dir="${dir.deploy.images}"/>
    <mkdir dir="${dir.project}/${dir.build}"/>

    <echo>copy the app root files.</echo>
    <echo>Make sure we exlude local pre-install</echo>
    <copy todir="${dir.deploy}">
        <fileset dir=".deploy/local">
            <include name="controller.xql"/>
            <include name="expath-pkg.xml"/>
            <exclude name="repo.xml"/>
            <exclude name="data.xconf"/>
            <exclude name="archive.xconf"/>
            <exclude name="pre-install.xql"/>
        </fileset>
    </copy>

    <echo>
        The repo: update repo for remote
        leave out password
    </echo>

    <echoxml file="${dir.deploy}/repo.xml" append="false" namespacepolicy="elementsOnly">
        <meta xmlns="http://exist-db.org/xquery/repo">
            <description>${project.description}</description>
            <author>${project.author}</author>
            <website>http://${project.domain}</website>
            <status>alpha</status>
            <license>GNU-LGPL</license>
            <copyright>true</copyright>
            <type>application</type>
            <target>${project.domain}</target>
            <prepare/>
            <finish/>
            <permissions user="${exist.username}" password="" group="dba" mode="rw-rw-r--" />
        </meta>
    </echoxml>


    <echo>copy our template files.</echo>

    <copy todir="${dir.deploy.templates}">
        <fileset dir=".deploy/local/templates" >
            <include name="**/*.html"/>
        </fileset>
    </copy>

    <echo>copy our modules files.</echo>

    <copy todir="${dir.deploy.modules}">
          <fileset dir=".deploy/local/modules" >
            <include name="**/*.xql"/>
            <include name="**/*.xqm"/>
            <exclude name="_local"/>
        </fileset>
    </copy>

    <echo>copy our data files.</echo>
    <copy todir="${dir.deploy.data}">
        <fileset dir=".deploy/local/data" />
    </copy>

    <antcall target="xar-undeploy-remove" />
    <antcall target="build-xar" />
    <antcall target="xar-upload" />
    <antcall target="xar-install" />
    <antcall target="clear-nginx-cache" />

    <antcall target="browse" />



</target>




<target name="remote-deployment-folder">

</target>

<target name="eXist-data-remote">
    <echo>Preprocess If required</echo>
    <antcall target="proccess-md" />
    <antcall target="proccess-sass" />
    <antcall target="proccess-templatesAndModules" />
    <antcall target="proccess-imagesAndScripts" />

</target>


<target name="proccess-md">
    <echo>copy our changed md proccessed files to the data dir</echo>
    <copy todir="${dir.deploy.data}">
        <fileset dir=".deploy/data" />
    </copy>
</target>




<target name="proccess-sass">
    <echo> TODO compile sass and generate a single stylesheet. {dir.deploy.styles}/style.css. Ref. rb file at root</echo>
    <echo> TODO for now just copy</echo>
<!--    <exec executable="compass" failonerror="true">
        <arg value="compile" />
        <redirector outputproperty="md" alwayslog="true" />
    </exec>
-->
    <copy todir="${dir.deploy.styles}" file=".deploy/local/resources/styles/style.css"/>

</target>

<target name="proccess-templatesAndModules">
  <!--  <echo>overwrite templates that contain HARD-CODED data</echo>-->
    <echo>copy our changed working template files to ${dir.deploy.templates}</echo>
    <copy todir="${dir.deploy.templates}">
        <fileset dir="templates" />
    </copy>
    <echo>copy our changed working modules files to ${dir.deploy.modules}</echo>
    <copy todir="${dir.deploy.modules}">
        <fileset dir="modules" >
             <include name="**/*" />
             <exclude name="*/archive-trigger.xqm"/>
             <exclude name="*/local-to-remote.xq"/>
        </fileset>
    </copy>
</target>

<target name="proccess-imagesAndScripts">
    <echo>TODO: optimise images then copy to ${dir.deploy}/resources/images</echo>
    <copy todir="${dir.deploy.images}" includeemptydirs="true">
        <fileset dir="www/resources/images" />
    </copy>
    <echo>TODO: lint and minify js then copy to ${dir.deploy.scripts}</echo>
    <copy todir="${dir.deploy.scripts}" includeemptydirs="true">
        <fileset dir="www/resources/scripts" />
    </copy>
</target>


<target name="build-xar">
    <zip destfile="${xar-location}" basedir="${dir.deploy}" whenempty="create" fallbacktoUTF8="true" excludes=".git*" />
</target>

<target name="xar-upload" >
        <exec executable="curl">
            <arg line="-T ${xar-location} -u ${exist.username}:${exist.password} ${repo.url}/${xar-file}" />
        </exec>

        <exec executable="curl">
            <arg line="-G -u ${exist.username}:${exist.password} ${repo.update}" />
        </exec>
</target>

<target name="xar-install" >
<property name="install-and-deploy">
xquery version "3.0";
import module namespace repo="http://exist-db.org/xquery/repo";
repo:install-and-deploy("${project.url}","${project.version}" ,"${repo.find}")
</property>

<xdb:xquery  uri="${exist.db}" query="${install-and-deploy}" user="${exist.username}" password="${exist.password}" />
</target>


<target name="condition-hostRomote">
  <condition property="isNotSet.hostRomote">
    <not>
       <isset property="host.remote" />
    </not>
   </condition>
</target>

<target name="set-hostRomote" if="isNotSet.hostRomote">
    <echo>Set remote host</echo>
    <property name="project.domain.remote" value="www.${project.domain}" />
    <property name="dir.exec" value="${dir.generator}/.bin" />
    <echo>${dir.exec}</echo>
    <echo>CHECK: if we can resolve project.domain remotely using :
    ${project.domain.remote} we want ${project.domain.remote} not to be loopback
    to ${host.local} and we want check if it is reachable</echo>
    <exec executable="python" dir="${dir.generator}/.bin" failonerror="false">
        <arg value="validateDomains.py" />
        <arg value="-d" />
        <arg value="${project.domain.remote}" />
        <redirector outputproperty="project.domain.remoteIP" />
    </exec>
    <echo>python out: ${project.domain.remoteIP}</echo>
    <condition property="out.hostbyname">
        <isset property="project.domain.remoteIP" />
    </condition>
    <echo>${out.hostbyname}</echo>
    <condition property="has.resolved.remote-domain">
        <not>
            <equals arg1="${host.local}" arg2="${project.domain.remoteIP}" />
        </not>
    </condition>
    <echo>CHECK has.resolved - ${has.resolved.remote-domain} ${host.local} not
    equal ${project.domain.remoteIP}</echo>
    <condition property="reachable.remotelhost8080">
        <isreachable url="http://${project.domain.remoteIP}" />
    </condition>
    <echo>CHECK ${project.domain.remoteIP} is reachable on port 8080</echo>
    <fail message="CHECK DEPENDENCIES: failed">
        <condition>
            <or>
                <isfalse value="${out.hostbyname}" />
                <isfalse value="${has.resolved.remote-domain}" />
                <isfalse value="${reachable.remotelhost8080}" />
            </or>
        </condition>
    </fail>
    <property name="host.remote" value="${project.domain.remoteIP}" />
    <propertyfile file="build.properties">
        <entry key="host.remote" value="${project.domain.remoteIP}" />
    </propertyfile>
</target>




<target name="xar-undeploy-remove">
<xdb:xquery
    uri="${exist.db}"
    query="${repo-undeploy-remove}"
    user="${exist.username}"
    password="${exist.password}"
    outputproperty="undeploy-remove"
/>

<echo>eXist reply:  ${undeploy-remove}</echo>
<exec executable="curl">
    <arg line="-G -u ${exist.username}:${exist.password} ${repo.update}"/>
</exec>
</target>


<target name="check-nginx-cache">
  <condition property="has-nginx-cache">
    <available file="${dir.nginx-cache}" type="dir"/>
  </condition>
 </target>

<target name="clear-nginx-cache">
<echo>Empty Ngnix cache EVERYTHING in it</echo>
    <exec executable="ssh">
        <arg value="${host.ssh}" />
        <arg value="cd ${dir.nginx-cache};" />
        <arg value="rm -R *" />
    </exec>
</target>

</project>
