<project
    basedir="."
    default="info"
    name="project-deployment"
    xmlns:xdb="http://exist-db.org/ant">

    <property file="build.properties" />
    <property environment="env"/>
    <property name="project.base" value="${basedir}"/>
    <property name="dir.build" value=".build/local"/>
    <property name="dir.deploy" value=".deploy/local"/>
    <property name="dir.www" value="www"/>
    <property name="dir.deploy.data" value="${dir.deploy}/data"/>
    <property name="dir.deploy.modules" value="${dir.deploy}/modules"/>
    <property name="dir.deploy.templates" value="${dir.deploy}/templates"/>
    <property name="dir.deploy.styles" value="${dir.deploy}/resources/styles"/>
    <property name="dir.deploy.scripts" value="${dir.deploy}/resources/scripts"/>
    <property name="dir.deploy.images" value="${dir.deploy}/resources/images"/>


    <property name="dir.nginx-cache" value="/usr/local/nginx/cache"/>

    <property name="browser" value="firefox"/>
    <!-- import eXist-db tasks -->
    <path id="classpath.core">
        <fileset dir="${dir.exist}/lib/core">
            <include name="*.jar"/>
        </fileset>
        <pathelement path="${dir.exist}/exist.jar"/>
        <pathelement path="${dir.exist}/exist-optional.jar"/>
    </path>

     <typedef resource="org/exist/ant/antlib.xml" uri="http://exist-db.org/ant">
        <classpath refid="classpath.core"/>
    </typedef>


<property name="repo-undeploy-remove">
xquery version "3.0";
import module namespace repo="http://exist-db.org/xquery/repo";
repo:undeploy("http://${project.domain}"),
repo:remove("http://${project.domain}")
</property>

<target name="info">
    <echo>info</echo>
<echo>

USER
user home: ${user.home}
user.name: ${user.name}

OS
os.name: ${os.name}

JAVA
java.version ${java.version}
java.home: ${java.home}

PROJECT
project.domain: ${project.domain}
project.abbrev: ${project.abbrev}
project.description: ${project.description}
</echo>

</target>

<target name="browse">
    <exec executable="${browser}" spawn="true">
        <arg value="${project.url.browse}" />
    </exec>
</target>

<target name="get-path">
    <loadresource property="path">
        <propertyresource name="relativePath" />
        <filterchain>
            <tokenfilter>
                <filetokenizer />
                <replacestring from="www/" to="" />
            </tokenfilter>
        </filterchain>
    </loadresource>
    <echo>${path}</echo>
</target>


<target name="store-xqm">
<echo>${relativePath}</echo>
<echo>${fileName}</echo>
<property name="exist.uri">xmldb:exist://${host.local}:8080/exist/xmlrpc/db/apps/${project.domain}/${relativePath}</property>
<property name="srcfile">${relativePath}/${fileName}.xqm</property>
<echo>${exist.uri}</echo>
<xdb:store
    uri="${exist.uri}"
    createcollection="true"
    srcfile="${srcfile}"
    user="${exist.username}"
    password="${exist.password}"
    permissions="rwxrwxr-x"
/>
</target>

<target name="store-xq">
<echo>${relativePath}</echo>
<echo>${fileName}</echo>
<property name="exist.uri">xmldb:exist://${host.local}:8080/exist/xmlrpc/db/apps/${project.domain}/${relativePath}</property>
<property name="srcfile">${relativePath}/${fileName}.xq</property>
<echo>${exist.uri}</echo>
<xdb:store
    uri="${exist.uri}"
    createcollection="true"
    srcfile="${srcfile}"
    user="${exist.username}"
    password="${exist.password}"
    permissions="rwxrwxr-x"
/>
</target>


<target name="store-data">
<property name="exist.uri">xmldb:exist://${host.local}:8080/exist/xmlrpc/db/apps/${project.domain}/${relativePath}</property>
<property name="srcfile">${relativePath}/${fileName}.xml</property>
<xdb:store
    uri="${exist.uri}"
    createcollection="true"
    srcfile="${srcfile}"
    user="${exist.username}"
    password="${exist.password}"
/>
<echo>${exist.uri}</echo>
</target>


<target name="store-html">
<echo>${relativePath}</echo>
<echo>${fileName}</echo>
<property name="exist.uri">xmldb:exist://${host.local}:8080/exist/xmlrpc/db/apps/${project.domain}/${relativePath}</property>
<property name="srcfile">${relativePath}/${fileName}.html</property>
<echo>${exist.uri}</echo>
<xdb:store
    uri="${exist.uri}"
    createcollection="true"
    srcfile="${srcfile}"
    user="${exist.username}"
    password="${exist.password}"
/>
</target>

<target name="store-scss">
<exec executable="compass"
    failonerror="false">
    <arg value="compile"/>
    <!-- <redirector outputproperty="md" alwayslog="true"/> -->
</exec>

<property name="srcfile">${dir.deploy}/resources/styles/style.css</property>
<property name="dbCssDir">resources/styles</property>
<property name="gzCssFile">www/resources/styles/style.css-gz</property>

<property name="exist.uri">xmldb:exist://${host.local}:8080/exist/xmlrpc/db/apps/${project.domain}/${dbCssDir}</property>

<echo>${exist.uri}</echo>
<xdb:store
    uri="${exist.uri}"
    createcollection="false"
    srcfile="${srcfile}"
    user="${exist.username}"
    password="${exist.password}"
/>
</target>


<target name="store-js">

    <echo>${relativePath}</echo>
    <echo>${fileName}</echo>

 <loadresource property="path">
  <propertyresource name="relativePath"/>
  <filterchain>
    <tokenfilter>
      <filetokenizer/>
      <replacestring from="www/" to=""/>
    </tokenfilter>
  </filterchain>
</loadresource>

<echo>${path}</echo>

<property name="exist.uri">xmldb:exist://${host.local}:8080/exist/xmlrpc/db/apps/${project.domain}/${path}</property>
<property name="srcfile">${relativePath}/${fileName}.js</property>
<echo>${exist.uri}</echo>
<xdb:store
    uri="${exist.uri}"
    createcollection="false"
    srcfile="${srcfile}"
    user="${exist.username}"
    password="${exist.password}"
/>
</target>



<target name="store-svg" depends="get-path">
    <echo>relativePath:  ${relativePath}</echo>
    <echo>fileName: ${fileName}</echo>
    <echo>path ${path}</echo>

    <property name="srcFile">${relativePath}/${fileName}.svg</property>
    <property name="deployFile">${dir.deploy.images}/svg/${fileName}.svg</property>
    <property name="deployGzipFile">${dir.deploy.images}/svg/${fileName}.svg.gz</property>
    <property name="deployScourGzipFile">${dir.deploy.images}/svg/${fileName}.svgz</property>
    <property name="resultURL">http://www.${project.domain}/${path}/${fileName}.svg</property>


    <echo>src File: ${srcFile}</echo>
    <echo>deploy File ${deployFile}</echo>
    <echo>deploy Scour Gzip File: ${deployScourGzipFile}</echo>
    <echo>deploy Gzip File ${deployGzipFile}</echo>

    <antcall target="preproccess-svg-file"  />

    <property name="exist.domain">xmldb:exist://${host.local}:8080/exist/xmlrpc/db/apps/${project.domain}</property>
    <echo>Adding} collection:  ${path}  to domain:  ${exist.domain}</echo>
    <xdb:create uri="${exist.domain}" collection="${path}" user="${exist.username}" password="${exist.password}" />
    <property name="exist.uri">${exist.domain}/${path}</property>

    <echo>
        Note: Both exist and nginx know about svg and svgz mimetypes
        So just store without forcing mimetype
    </echo>


    <echo>Storing ${deployFile} to  ${exist.uri}</echo>
    <xdb:store uri="${exist.uri}"
               createcollection="false"
               srcfile="${deployFile}"
               user="${exist.username}"
               password="${exist.password}"
               />

    <echo>Storing ${deployGzipFile} to  ${exist.uri}</echo>
    <xdb:store uri="${exist.uri}"
               createcollection="false"
               srcfile="${deployGzipFile}"
               user="${exist.username}"
               password="${exist.password}"
               />

<echo>
 Tests: are we serving gzipped svg

curl  -s -o /dev/null  -w "size_download=%{size_download}" ${resultURL}

curl  -s -o /dev/null  -H "Accept-Encoding: gzip,deflate" -w "size_download=%{size_download}"  ${resultURL}

curl -s -I -H "Accept-Encoding: gzip,deflate"  ${resultURL}  | grep -i "Content-Encoding:"
</echo>



</target>

<target name="preproccess-svg-file">
    <echo>optimise SVG then copy to flattened dir: ${dir.deploy.images}/svg</echo>

   <echo>Check if scour installed</echo>
   <exec executable="/bin/sh">
       <arg line='-c "scour --version"' />
       <redirector outputproperty="scour-version" />
   </exec>

  <echo>scour version: ${scour-version}</echo>

   <echo>Run Scour</echo>
   <exec executable="/bin/sh">
       <arg line='-c "scour -i ${srcFile} -o ${deployFile} --strip-xml-prolog --indent=none"' />
       <redirector outputproperty="scour-out" />
   </exec>

   <echo>Check if gzip installed</echo>
   <exec executable="/bin/sh">
       <arg line='-c "gzip --version"' />
       <redirector outputproperty="scour-version" />
   </exec>

 <echo>gzip version: ${scour-version}</echo>

   <echo>Run Gzip</echo>

   <exec executable="/bin/sh">
       <arg line='-c "gzip -v -9 &lt; ${deployFile} &gt; ${deployGzipFile}"' />
       <redirector outputproperty="gzip-out" />
   </exec>

   <echo>gzip out: ${gzip-out}</echo>

</target>

<target name="setHomeConditions">
  <fail>
     <condition>
       <not>
         <contains string="${relativePath}" substring="www" />
       </not>
     </condition>
   </fail>

  <condition property="is.home">
    <equals arg1="${relativePath}" arg2="www" />
  </condition>

  <condition property="is.mdPage">
    <not>
    <contains string="${relativePath}" substring="_post" />
    </not>
  </condition>

  <condition property="is.mdPost">
    <contains string="${relativePath}" substring="_post" />
  </condition>

</target>

<target name="hasMd2Failed">
  <condition property="has.md2Failed">
    <equals arg1="${outfile}" arg2="FAIL" />
  </condition>
</target>

<target name="isHome" if="is.home">
 <property name="path">home</property>
</target>

<target name="isNotHome" unless="is.home">
  <loadresource property="path">
  <propertyresource name="relativePath"/>
  <filterchain>
    <tokenfilter>
      <filetokenizer/>
      <replacestring from="www/" to=""/>
    </tokenfilter>
  </filterchain>
</loadresource>
</target>


<target name="store-md" depends="setHomeConditions, isHome, isNotHome">
<property name="pyFile">.bin/md2.py</property>
<property name="srcfile">${relativePath}/${fileName}.md</property>
<echo>srcfile:  ${srcfile}</echo>

<exec executable="python"
    dir="${project.base}"
    failonerror="false">
    <arg value="${pyFile}"/>
    <arg value="-i"/>
    <arg value="${srcfile}"/>
    <redirector outputproperty="outfile" alwayslog="true" />
</exec>

<antcall target="hasMd2Failed"  />
<antcall target="store-page"  />
<antcall target="store-post"  />
</target>

<target name="store-page" if="is.mdPage">
    <property name="exist.uri">xmldb:exist://${host.local}:8080/exist/xmlrpc/db/apps/${project.domain}/data/pages/${path}</property>
    <echo>OUTFILE:  ${outfile}  </echo>
    <echo>EXIST.URI:  ${exist.uri} </echo>
    <xdb:store
        uri="${exist.uri}"
        createcollection="true"
        srcfile="${outfile}"
        user="${exist.username}"
        password="${exist.password}"
    />
</target>

<target name="store-post" unless="has.md2Failed"  if="is.mdPost">
<echo>outfile:  ${outfile}</echo>
 <exec executable="/bin/sh">
       <arg value="-c"/>
       <arg line="&quot; echo ${outfile} | sed 's:^\.deploy\/data\/\(.*\)\/.*$:\1:' &quot;" />
       <redirector outputproperty="bash.out.collection" />
   </exec>

<echo>bash.out.collection:  ${bash.out.collection}</echo>


 <property name="exist.local.uri">xmldb:exist://${host.local}:8080/exist/xmlrpc/db/apps/${project.domain}/data/${bash.out.collection}</property>
    <echo>OUTFILE:  ${outfile}  </echo>
    <echo>EXIST.LOCAL.URI:  ${exist.local.uri} </echo>

 <xdb:store
        uri="${exist.local.uri}"
        createcollection="true"
        srcfile="${outfile}"
        user="${exist.username}"
        password="${exist.password}"
    />
</target>


<target name="proccess-md">
    <property name="pyFile">.bin/md2.py</property>
     <echo>${pyFile}</echo>
    <apply executable="python" failonerror="false" dir="${project.base}">
        <arg value="${pyFile}" />
        <arg value="-i" />
        <srcfile />
        <fileset dir="${dir.www}">
            <exclude name="**/resources/**" />
            <include name="**/*.md" />
        </fileset>
    </apply>
</target>

<target name="proccess-sass">
    <echo>compile sass and generate a single stylesheet. {dir.deploy.styles}/style.css. Ref. rb file at root</echo>
    <exec executable="compass" failonerror="true">
        <arg value="compile" />
        <redirector outputproperty="md" alwayslog="true" />
    </exec>
</target>

<target name="proccess-templatesAndModules">
  <!--  <echo>overwrite templates that contain HARD-CODED data</echo>-->
    <echo>copy our changed working template files to ${dir.deploy.templates}</echo>
    <copy todir="${dir.deploy.templates}">
        <fileset dir="templates" />
    </copy>
    <echo>delete ${dir.deploy.modules}</echo>
    <delete dir="${dir.deploy.modules}" />
    <echo>copy our changed working modules files to ${dir.deploy.modules}</echo>
    <copy todir="${dir.deploy.modules}">
        <fileset dir="modules" />
    </copy>
</target>

<target name="proccess-imagesAndScripts">
    <echo>TODO: optimise images then copy to ${dir.deploy}/resources/images</echo>
    <copy todir="${dir.deploy.images}" includeemptydirs="true">
        <fileset dir="www/resources/images" />
    </copy>
    <echo>TODO: lint and minify js then copy to ${dir.deploy.scripts}</echo>
    <copy todir="${dir.deploy.scripts}" includeemptydirs="true">
        <fileset dir="www/resources/scripts" />
    </copy>
</target>

<target name="theme">
<mkdir dir="${dir.generator}/themes/${project.theme}"/>
<sync todir="${dir.generator}/themes/${project.theme}">
        <fileset dir="${basedir}">
            <include name="build.xml" />
            <include name="config.rb" />
            <include name=".deploy/controller.xql" />
            <include name="www/resources/**/*.scss" />
            <include name="templates/**/*.html" />
            <include name="modules/**/*.xqm" />
            <include name="modules/**/*.xql" />
        </fileset>

<!-- Add stuff that we don't want  to overide in the orginal theme       -->
        <preserveintarget>
            <include name="www/resources/**" />
            <include name="www/**/*.md" />
            <include name="templates/includes/tagline.html" />
        </preserveintarget>
</sync>
</target>


<target name="deploy-info">
<property name="q_repo-list">
xquery version "3.0";
import module namespace repo="http://exist-db.org/xquery/repo";
let $seq := repo:list()
return string-join($seq, ',')
</property>

<xdb:xquery
            uri="xmldb:exist://${host.local}:8080/exist/xmlrpc/db"
            query="${q_repo-list}" user="${exist.username}"
            password="${exist.password}"
            outputproperty="repo-list" />
<echo>${repo-list}</echo>

<property name="q_repo-find">xquery version "3.0";
import module namespace repo="http://exist-db.org/xquery/repo";
let $seq := repo:list()
return $seq[contains(., '${project.domain}')]</property>

<xdb:xquery uri="xmldb:exist://${host.local}:8080/exist/xmlrpc/db"
            query="${q_repo-find}" user="${exist.username}"
            password="${exist.password}"
            outputproperty="repo-find" />
<echo>${repo-find}</echo>
<echo>LIST resources and collections in: xmldb:exist://${host.local}:8080/exist/xmlrpc/db/apps/${project.domain}</echo>
<xdb:list uri="xmldb:exist://${host.local}:8080/exist/xmlrpc/db/apps/${project.domain}"
          collections="true"
          resources="true"
          outputproperty="collections" />
<echo>${collections}</echo>
</target>



<target name="get-short-link">
<!--    test:  <property name="n" value="14001" />-->
      <ant antfile=".bin/ant/local-calls.xml" target="get-short-link"/>
</target>



<!--  Count Child Resources xmldb:get-child-resources  -->
<target name="child-resources-count" >
    <ant antfile=".bin/ant/local-calls.xml" target="child-resources-count"/>
</target>


<target name="collection-available" >
    <ant antfile=".bin/ant/local-calls.xml" target="collection-available"/>
</target>

<target name="get-uuid" >
     <ant antfile=".bin/ant/local-calls.xml" target="get-uuid"/>
</target>


<target name="get-hash" >
     <ant antfile=".bin/ant/local-calls.xml" target="get-hash"/>
</target>


<target name="get-project.author" >
    <echo>${project.author}</echo>
</target>

<target name="get-project-domain" >
    <echo>${project.domain}</echo>
</target>


</project>
